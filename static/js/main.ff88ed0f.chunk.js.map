{"version":3,"sources":["components/Employee/Employee.js","components/Sort/Sort.js","components/Search/Search.js","services/employee.js","components/EmployeeList/EmployeeList.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Employee","employee","this","props","name","picture","phone","email","dob","date","Date","toDateString","src","thumbnail","alt","first","last","Component","Sort","onClick","callback","className","Search","htmlFor","type","value","searchTerm","onChange","onFilterChange","getEmployeesWithParams","params","a","axios","get","employees","data","EmployeeList","event","target","setState","filteredEmployees","state","filter","toLowerCase","length","includes","sortByName","direction","sort","emp1","emp2","sortByEmail","b","results","map","key","id","Header","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ff88ed0f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Employee.css\";\r\n\r\nexport default class Employee extends Component {\r\n  render() {\r\n    const { employee } = this.props;\r\n    const { name, picture, phone, email, dob } = employee;\r\n    const date = new Date(dob.date).toDateString();\r\n    return (\r\n      <tbody>\r\n        <tr>\r\n          <td>\r\n            <img src={picture.thumbnail} alt=\"Employee\" />\r\n          </td>\r\n          <td>\r\n            <div>{`${name.first} ${name.last}`}</div>\r\n          </td>\r\n          <td>{phone}</td>\r\n          <td>{email}</td>\r\n          <td>{date}</td>\r\n        </tr>\r\n      </tbody>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport function Sort(props) {\r\n  return (\r\n    <>\r\n      <button\r\n        onClick={() => props.callback(\"asc\")}\r\n        className=\"btn btn-sm btn-light p-0 mx-3\"\r\n      >\r\n        <span>&#8593;</span>\r\n      </button>\r\n      <button\r\n        onClick={() => props.callback(\"desc\")}\r\n        className=\"btn btn-sm btn-light p-0\"\r\n      >\r\n        <span>&#8595;</span>\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport function Search(props) {\r\n  return (\r\n    <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n      <label htmlFor=\"search\">Search by Name</label>\r\n      <input\r\n        className=\"flex-grow-1 ml-3\"\r\n        type=\"text\"\r\n        value={props.searchTerm}\r\n        onChange={props.onFilterChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport async function getEmployeesWithParams(params) {\r\n  const employees = await axios.get(\r\n    \"https://randomuser.me/api/?results=200&nat=us\"\r\n  );\r\n  return employees.data;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Employee from \"../Employee/Employee\";\r\nimport { Sort } from \"../Sort/Sort\";\r\nimport { Search } from \"../Search/Search\";\r\nimport { getEmployeesWithParams } from \"../../services/employee\";\r\nimport \"./EmployeeList.css\";\r\n\r\nexport default class EmployeeList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      employees: [],\r\n      searchTerm: \"\",\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const employees = await getEmployeesWithParams();\r\n    this.setState({ employees: employees.results });\r\n  }\r\n\r\n  onFilterChange = (event) => {\r\n    const searchTerm = event.target.value;\r\n    this.setState({ searchTerm });\r\n  };\r\n\r\n  filteredEmployees = () => {\r\n    return this.state.employees.filter((employee) => {\r\n      const name = `${employee.name.first} ${employee.name.last}`.toLowerCase();\r\n      const { searchTerm, employees } = this.state;\r\n      return searchTerm.length\r\n        ? name.includes(searchTerm.toLowerCase())\r\n        : employees;\r\n    });\r\n  };\r\n\r\n  sortByName = (direction) => {\r\n    this.setState({\r\n      employees: this.state.employees.sort((emp1, emp2) =>\r\n        this.sort(\r\n          emp1.name.last.toLowerCase(),\r\n          emp2.name.last.toLowerCase(),\r\n          direction\r\n        )\r\n      ),\r\n    });\r\n  };\r\n\r\n  sortByEmail = (direction) => {\r\n    this.setState({\r\n      employees: this.state.employees.sort((emp1, emp2) =>\r\n        this.sort(emp1.email.toLowerCase(), emp2.email.toLowerCase(), direction)\r\n      ),\r\n    });\r\n  };\r\n\r\n  sort = (a, b, direction) => {\r\n    if (a < b) {\r\n      return direction === \"asc\" ? -1 : 1;\r\n    }\r\n    if (a > b) {\r\n      return direction === \"asc\" ? 1 : -1;\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Search\r\n          onFilterChange={this.onFilterChange}\r\n          searchTerm={this.state.searchTerm}\r\n        />\r\n        <table className=\"table\">\r\n          <thead>\r\n            <th>Image</th>\r\n            <th>\r\n              Name <Sort callback={this.sortByName} />\r\n            </th>\r\n            <th>Phone</th>\r\n            <th>\r\n              Email <Sort callback={this.sortByEmail} />\r\n            </th>\r\n            <th>DOB</th>\r\n          </thead>\r\n          {this.filteredEmployees().map((employee) => (\r\n            <Employee key={employee.id.value} employee={employee} />\r\n          ))}\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport function Header() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light mb-3\">\r\n      <a className=\"navbar-brand\" href=\"/\">\r\n        Employee List\r\n      </a>\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarSupportedContent\"\r\n        aria-controls=\"navbarSupportedContent\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n    </nav>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport EmployeeList from \"./components/EmployeeList/EmployeeList\";\nimport { Header } from \"./components/Header/Header\";\n\nexport default function App() {\n  return (\n    <div className=\"App container border\">\n      <Header />\n      <EmployeeList />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}